From 13482dc320913bf422350f0f734536102c47e618 Mon Sep 17 00:00:00 2001
From: Kazuho Oku <kazuhooku@gmail.com>
Date: Wed, 20 Jul 2016 18:24:47 +0900
Subject: [PATCH 1/2] add failing test

---
 t/50fastcgi.t | 44 ++++++++++++++++++++++++++++++++++++++++++++
 1 file changed, 44 insertions(+)

diff --git a/t/50fastcgi.t b/t/50fastcgi.t
index f7a9f0c..3ec3587 100644
--- a/t/50fastcgi.t
+++ b/t/50fastcgi.t
@@ -92,4 +92,48 @@ doit(1, 0);
 doit(1, 1);
 doit(1, 1);
 
+subtest 'httpoxy' => sub {
+    my $doit = sub {
+        my ($drop, $cb) = @_;
+        unlink "$tempdir/fcgi.sock";
+        my $upstream = spawn_server(
+            argv => [
+                qw(plackup -s FCGI --access-log /dev/null --listen),
+                "$tempdir/fcgi.sock",
+                ASSETS_DIR . "/upstream.psgi",
+            ],
+            is_ready => sub {
+                -e "$tempdir/fcgi.sock";
+            },
+        );
+        # spawn h2o
+        my $dropconf = $drop ? << 'EOT' : "";
+        setenv:
+          HTTP_PROXY: ""
+EOT
+        my $server = spawn_h2o(<< "EOT");
+hosts:
+  default:
+    paths:
+      "/":
+        fastcgi.connect:
+          port: $tempdir/fcgi.sock
+          type: unix
+$dropconf
+EOT
+        run_with_curl($server, sub {
+            my ($proto, $port, $curl) = @_;
+            my $content = `$curl --silent --show-error -H proxy:foobar $proto://127.0.0.1:$port/echo-headers`;
+            $cb->($content);
+        });
+    };
+    $doit->(undef, sub {
+        like $_[0], qr{^proxy: foobar$}mi, "keep";
+    });
+    $doit->(1, sub {
+        like $_[0], qr{^proxy: $}mi, "drop";
+    });
+};
+
+
 done_testing();

From fd2d45c62dd6dfb5a88a24b3f414afecd8cf7852 Mon Sep 17 00:00:00 2001
From: Kazuho Oku <kazuhooku@gmail.com>
Date: Tue, 19 Jul 2016 17:28:02 +0900
Subject: [PATCH 2/2] [fastcgi] environment variable overwrites `HTTP_*`

---
 lib/handler/fastcgi.c | 22 ++++++++++++++++++++++
 1 file changed, 22 insertions(+)

diff --git a/lib/handler/fastcgi.c b/lib/handler/fastcgi.c
index 3cf629c..e417b9e 100644
--- a/lib/handler/fastcgi.c
+++ b/lib/handler/fastcgi.c
@@ -204,6 +204,20 @@ static void append_address_info(h2o_req_t *req, iovec_vector_t *vecs, const char
     }
 }
 
+static int envname_is_headername(const h2o_iovec_t *env, const h2o_iovec_t *header)
+{
+    const char *ep , *hp, *hend;
+
+    if (env->len != 5 + header->len)
+        return 0;
+    if (memcmp(env->base, "HTTP_", 5) != 0)
+        return 0;
+    for (ep = env->base + 5, hp = header->base, hend = hp + header->len; hp < hend; ++ep, ++hp)
+        if (*ep != h2o_toupper(*hp))
+            return 0;
+    return 1;
+}
+
 static void append_params(h2o_req_t *req, iovec_vector_t *vecs, h2o_fastcgi_config_vars_t *config)
 {
     h2o_iovec_t path_info = {};
@@ -289,6 +303,12 @@ static void append_params(h2o_req_t *req, iovec_vector_t *vecs, h2o_fastcgi_conf
                 /* accumulate the length of the cookie, together with the separator */
                 cookie_length += h->value.len + 1;
             } else {
+                size_t i;
+                for (i = 0; i != req->env.size; i += 2) {
+                    h2o_iovec_t *envname = req->env.entries + i;
+                    if (envname_is_headername(envname, h->name))
+                        goto NextHeader;
+                }
                 char *dst = append_pair(&req->pool, vecs, NULL, h->name->len + sizeof("HTTP_") - 1, h->value.base, h->value.len);
                 const char *src = h->name->base, *src_end = src + h->name->len;
                 *dst++ = 'H';
@@ -299,6 +319,8 @@ static void append_params(h2o_req_t *req, iovec_vector_t *vecs, h2o_fastcgi_conf
                 for (; src != src_end; ++src)
                     *dst++ = *src == '-' ? '_' : h2o_toupper(*src);
             }
+        NextHeader:
+            ;
         }
         if (cookie_length != 0) {
             /* emit the cookie merged */
